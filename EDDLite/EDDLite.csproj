<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" InitialTargets="Version">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{E9A5F9C3-D450-4791-8D99-21F6C1C728DB}</ProjectGuid>
    <OutputType>WinExe</OutputType>
    <RootNamespace>EDDLite</RootNamespace>
    <AssemblyName>EDDLite</AssemblyName>
    <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <Deterministic>true</Deterministic>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup>
    <ApplicationIcon>edlogo_3mo_icon.ico</ApplicationIcon>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="QuickJSON, Version=0.9.0.0, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\packages\RJKJSoft.QuickJSON.0.9.0\lib\net48\QuickJSON.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Configuration" />
    <Reference Include="System.Core" />
    <Reference Include="System.Web" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Deployment" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="EDDConfig.cs" />
    <Compile Include="EDDiscoveryTranslations.cs" />
    <Compile Include="EDDLiteController.cs" />
    <Compile Include="EDDLiteForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="EDDLiteForm.Designer.cs">
      <DependentUpon>EDDLiteForm.cs</DependentUpon>
    </Compile>
    <Compile Include="EDDOptions.cs" />
    <Compile Include="Forms\AboutForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="Forms\AboutForm.designer.cs">
      <DependentUpon>AboutForm.cs</DependentUpon>
    </Compile>
    <Compile Include="Forms\DraggableFormPos.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="Forms\DraggableFormPos.Designer.cs">
      <DependentUpon>DraggableFormPos.cs</DependentUpon>
    </Compile>
    <Compile Include="Installer.cs" />
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <EmbeddedResource Include="EDDLiteForm.resx">
      <DependentUpon>EDDLiteForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="Forms\AboutForm.resx">
      <DependentUpon>AboutForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="Forms\DraggableFormPos.resx">
      <DependentUpon>DraggableFormPos.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <Compile Include="Properties\ExtraVersion.cs" />
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="App.Portable.config" />
    <None Include="packages.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <None Include="App.config" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\BaseUtilities\BaseUtilities\BaseUtils.csproj">
      <Project>{c657c881-f3e1-45ba-aca5-966348010414}</Project>
      <Name>BaseUtils</Name>
    </ProjectReference>
    <ProjectReference Include="..\BaseUtilities\SQLLite\SQLLite.csproj">
      <Project>{3d79de63-5eec-4f30-a879-fb4c6ba4b2dc}</Project>
      <Name>SQLLite</Name>
    </ProjectReference>
    <ProjectReference Include="..\EliteDangerousCore\EDDDLLInterfaces\EDDDLLInterfaces.csproj">
      <Project>{829041b1-d4a5-48d9-8260-b5eeff28bcd8}</Project>
      <Name>EDDDLLInterfaces</Name>
    </ProjectReference>
    <ProjectReference Include="..\EliteDangerousCore\EliteDangerous\EliteDangerous.csproj">
      <Project>{019917a4-7342-4f67-8aaf-9e20c016a935}</Project>
      <Name>EliteDangerous</Name>
    </ProjectReference>
    <ProjectReference Include="..\ExtendedControls\ExtendedControls\ExtendedControls.csproj">
      <Project>{2049403f-f4c7-45e6-b777-6390c78e4d2b}</Project>
      <Name>ExtendedControls</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\EDD License.rtf" />
    <None Include="Resources\edlogo_3mo_icon.ico" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Logo.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\EDSM.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\EDShipYard.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\ShowOnCoriolis.png" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Inara.PNG" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\EDCD.PNG" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Credits.txt" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\EDDB.png" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="edlogo_3mo_icon.ico" />
    <Content Include="Resources\spansh.png" />
  </ItemGroup>
  <UsingTask TaskName="Zip" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFilename ParameterType="System.String" Required="true" />
      <BaseDirectory ParameterType="System.String" Required="true" />
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs"><![CDATA[
            try
            {
                var zipnames = new HashSet<string>();
                Log.LogMessage("Zip root '" + BaseDirectory + "'", MessageImportance.High);

                using (Stream zipStream = new FileStream(Path.GetFullPath(OutputFilename), FileMode.Create, FileAccess.Write))
                {
                    using (ZipArchive archive = new ZipArchive(zipStream, ZipArchiveMode.Create))
                    {
                        foreach (ITaskItem fileItem in Files)
                        {
                            string filename = fileItem.ItemSpec;

                            if (File.Exists(filename))
                            {
                                string name = fileItem.GetMetadata("Name");
                                string metaname = name;

                                if (String.IsNullOrEmpty(name))
                                {
                                    if (filename.StartsWith(BaseDirectory))
                                    {
                                        name = filename.Substring(BaseDirectory.Length);
                                    }
                                    else
                                    {
                                        name = Path.GetFileName(filename);
                                    }
                                }

                                Log.LogMessage(".. zip up '" + filename + "' m:'" + metaname + "' -> '" + name + "'", MessageImportance.High);

                                if (!zipnames.Contains(name))
                                {
                                    using (Stream fileStream = new FileStream(filename, FileMode.Open, FileAccess.Read))
                                    {
                                        using (Stream fileStreamInZip = archive.CreateEntry(name).Open())
                                        {
                                            fileStream.CopyTo(fileStreamInZip);
                                            zipnames.Add(name);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                Log.LogErrorFromException(ex);
                return false;
            }
      ]]></Code>
    </Task>
  </UsingTask>
  <Target Name="MakeZip" Condition=" '$(OS)' != 'Unix' and '$(OutDir)' != '' and Exists('$(TargetPath)') " AfterTargets="Build">
    <ItemGroup>
      <ZipFiles Include="$(TargetPath)" />
      <ZipFiles Include="$(OutDir)*.dll" />
      <ZipFiles Include="$(OutDir)*.pdb" />
      <ZipFiles Include="$(ProjectDir)App.Portable.config">
        <Name>EDDLite.exe.config</Name>
      </ZipFiles>
      <Zipfiles Include="$(OutDir)x64\SQLite.Interop.dll">
        <Name>x64\SQLite.Interop.dll</Name>
      </Zipfiles>
      <Zipfiles Include="$(OutDir)x86\SQLite.Interop.dll">
        <Name>x86\SQLite.Interop.dll</Name>
      </Zipfiles>
    </ItemGroup>
    <Message Text="Portable build Zip up '@(ZipFiles)' -&gt; '$(OutDir)EDDLite.Portable.zip'" />
    <Zip OutputFilename="$(OutDir)EDDLite.Portable.zip" BaseDirectory="$(OutDir)" Files="@(ZipFiles)" />
    <Error Condition="!Exists('$(OutDir)EDDLite.Portable.zip')" Text="Unknown error in BuildPortableZip." />
  </Target>
  <Target Name="Version" BeforeTargets="Build">
    <PropertyGroup Condition=" '$(OS)' != 'Unix' ">
      <GitPath>$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\GitForWindows@InstallPath)</GitPath>
      <GitPath Condition=" '$(GitPath)' == '' Or !Exists('$(GitPath)\bin\git.exe') ">$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\GitForWindows', 'InstallPath', null, RegistryView.Registry64))</GitPath>
      <GitPath Condition=" '$(GitPath)' != '' ">$(GitPath)\bin\git.exe</GitPath>
      <GitPath Condition=" !Exists('$(GitPath)') ">git.exe</GitPath>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(OS)' == 'Unix' ">
      <GitPath Condition=" Exists('/usr/bin/git') ">/usr/bin/git</GitPath>
      <GitPath Condition=" '$(GitPath)' == '' ">git</GitPath>
    </PropertyGroup>
    <PropertyGroup>
      <MSBuildCommunityTasksPath>$(SolutionDir)\packages\MSBuildTasks.1.5.0.235\tools</MSBuildCommunityTasksPath>
    </PropertyGroup>
    <PropertyGroup>
      <In>$([System.IO.File]::ReadAllText('$(MSBuildProjectDirectory)/Properties/AssemblyInfo.cs'))</In>
      <Pattern>^\s*\[assembly: AssemblyVersion\(\D*(\d+)\.(\d+(\.\d+)*)</Pattern>
      <AssemblyVersionMajor>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups[1].Value)</AssemblyVersionMajor>
      <AssemblyVersionMinor>$([System.Text.RegularExpressions.Regex]::Match($(In), $(Pattern), System.Text.RegularExpressions.RegexOptions.Multiline).Groups[2].Value)</AssemblyVersionMinor>
    </PropertyGroup>
    <Exec Command="&quot;$(GitPath)&quot; describe --always --dirty" ConsoleToMsBuild="true" EchoOff="true" StandardOutputImportance="low" StandardErrorImportance="low" IgnoreExitCode="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitCommitHash" />
      <Output TaskParameter="ExitCode" PropertyName="GitExitCode" />
    </Exec>
    <PropertyGroup Condition="$(GitExitCode) != 0">
      <GitCommitHash>
      </GitCommitHash>
      <GitCommitHash Condition="Exists('$(SolutionDir)/.git/HEAD')">$([System.IO.File]::ReadAllText('$(SolutionDir)/.git/HEAD'))</GitCommitHash>
      <Pattern>^ref: (.*)$</Pattern>
      <GitCommitRef Condition="$([System.Text.RegularExpressions.Regex]::IsMatch($(GitCommitHash), $(Pattern)))">$([System.Text.RegularExpressions.Regex]::Match($(GitCommitHash), $(Pattern)).Groups[1].Value)</GitCommitRef>
      <GitCommitHash Condition="'$(GitCommitRef)' != '' And Exists('$(SolutionDir)/.git/$(GitCommitRef)')">$([System.IO.File]::ReadAllText('$(SolutionDir)/.git/$(GitCommitRef)'))</GitCommitHash>
      <Pattern>^([0-9a-f]{7})[0-9a-f]*$</Pattern>
      <GitCommitHash Condition="$([System.Text.RegularExpressions.Regex]::IsMatch($(GitCommitHash), $(Pattern)))">$(GitCommitHash.SubString(0,7))</GitCommitHash>
    </PropertyGroup>
    <Message Importance="high" Text="Version: $(AssemblyVersionMajor).$(AssemblyVersionMinor), Commit: $(GitCommitHash)" />
    <ItemGroup>
      <AssemblyAttribute Include="System.Reflection.AssemblyInformationalVersionAttribute">
        <_Parameter1>$(AssemblyVersionMajor).$(AssemblyVersionMinor)+$(GitCommitHash)</_Parameter1>
      </AssemblyAttribute>
    </ItemGroup>
    <WriteCodeFragment AssemblyAttributes="@(AssemblyAttribute)" Language="C#" OutputFile="Properties\ExtraVersion.cs" />
  </Target>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
</Project>